package service

import (
	"os"
	"testing"

	"redits.oculeus.com/asorokin/captura-logs-manager/agent-bit-control/internal/datastructs"

	"github.com/stretchr/testify/assert"
	"gopkg.in/ini.v1"
	logger "redits.oculeus.com/asorokin/logging"
)

var testConfig = `c:\Users\android\go\src\redits.oculeus.com\asorokin\captura-logs-manager\test-data\agent-bit-control-test.ini`

//1. OK. 1 файл есть алерт фразы = ок, количество тегов == алерт-фразам, в обоих блоках общий путь к логам
//2. OK. 1 файл нет алерт фраз = !ок, что отсеивать? - это ошибка, проверять на уровне сканирования таблицы?
//3. OK. 2 файла есть алерт фразы = ок, количество тегов == алерт-фразам, в алерт блоке изменить путь к логам
//4. OK. 2 файла нет алерт фраз = ок, нет фильтр блока, только инпут-оутпуты с путями к логам

func TestWriteNewConfig(t *testing.T) {
	srv := testingService(t)
	srv.servedApps = testingCasesServedApps(t)
	file := srv.ini.Section("service").Key("path_to_fluent_bit_config").String()
	f, err := os.Create(file)
	if err != nil {
		t.Error(err)
	}
	defer f.Close()
	defer os.Remove(file)
	f.Close()
	if err := srv.writeNewConfig(); err != nil {
		t.Error(err)
	}
	actual, err := os.ReadFile(file)
	if err != nil {
		t.Error(err)
	}
	expected, err := os.ReadFile(srv.ini.Section("test").Key("case_1").String())
	if err != nil {
		t.Error(err)
	}
	t.Run("Общий лог файл", func(t *testing.T) {
		assert.Equal(t, expected, actual)
	})

}

func testingCasesServedApps(t *testing.T) []*datastructs.ServedApplication {
	t.Helper()
	var testingCases []*datastructs.ServedApplication

	//1. Один общий лог файл и есть алерт-фразы, количество лог-тегов равно количеству алерт-фраз
	// Должно записаться количество блоков равных тегам. В блоках с алерт фразами нужны фильтры
	tc := &datastructs.ServedApplication{
		AppName:       "Общий лог файл",
		LogFile:       "common.log",
		GeneralTag:    "all-log",
		AlertTags:     []string{"warn-log", "error-log"},
		AlertKeywords: []string{"WAR", "ERR"},
	}
	testingCases = append(testingCases, tc)
	return testingCases
}

func testingService(t *testing.T) *Service {
	t.Helper()
	cfg, err := ini.Load(testConfig)
	if err != nil {
		return nil
	}
	cfgLog := logger.DefaultConfig()
	if err := cfg.Section("logger").MapTo(cfgLog); err != nil {
		return nil
	}

	return &Service{
		log: logger.New(cfgLog),
		ini: cfg,
	}
}
